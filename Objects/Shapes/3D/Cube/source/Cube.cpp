#include "../include/Cube.h"

Cube::Cube(const glm::vec3 &position, const glm::vec3 &rotation, const glm::vec3 scale)
    : WorldObject3D(position, rotation, scale) {
}

void Cube::initializeVertices(const std::vector<GLfloat> &vertices) {
    this->vertices = vertices;
}

void Cube::initializeVertices() {
    vertices = { // TODO: replace it
            // Перший трикутник (передня сторона)
            -100,  100, 0.0,   0.0, 0.0, 1.0,   0.0, 1.0,
            -100, -100, 0.0,   0.0, 0.0, 1.0,   0.0, 0.0,
            100, -100, 0.0,    0.0, 0.0, 1.0,   1.0, 0.0,

            -100,  100, 0.0,   0.0, 0.0, 1.0,   0.0, 1.0,
            100, -100, 0.0,    0.0, 0.0, 1.0,   1.0, 0.0,
            100, 100, 0.0,     0.0, 0.0, 1.0,   1.0, 1.0,

            // Другий трикутник (задня сторона)
            -100,  100, -200.0,   0.0, 0.0, 1.0,   0.0, 1.0,
            100, -100, -200.0,    0.0, 0.0, 1.0,   1.0, 0.0,
            -100, -100, -200.0,   0.0, 0.0, 1.0,   0.0, 0.0,

            -100,  100, -200.0,   0.0, 0.0, 1.0,   0.0, 1.0,
            100, 100, -200.0,     0.0, 0.0, 1.0,   1.0, 1.0,
            100, -100, -200.0,    0.0, 0.0, 1.0,   1.0, 0.0,

            // Третій трикутник (ліва сторона)
            -100,  100, 0.0,   -1.0, 0.0, 0.0,   0.0, 1.0,
            -100, -100, -200.0, -1.0, 0.0, 0.0,   1.0, 0.0,
            -100, -100, 0.0,   -1.0, 0.0, 0.0,   0.0, 0.0,

            -100,  100, 0.0,   -1.0, 0.0, 0.0,   0.0, 1.0,
            -100, 100, -200.0,  -1.0, 0.0, 0.0,   1.0, 1.0,
            -100, -100, -200.0, -1.0, 0.0, 0.0,   1.0, 0.0,

            // Четвертий трикутник (права сторона)
            100,  100, 0.0,    1.0, 0.0, 0.0,   0.0, 1.0,
            100, -100, 0.0,    1.0, 0.0, 0.0,   0.0, 0.0,
            100, -100, -200.0,  1.0, 0.0, 0.0,   1.0, 0.0,

            100,  100, 0.0,    1.0, 0.0, 0.0,   0.0, 1.0,
            100, -100, -200.0,  1.0, 0.0, 0.0,   1.0, 0.0,
            100, 100, -200.0,   1.0, 0.0, 0.0,   1.0, 1.0,

            // П'ятий трикутник (верхня сторона)
            -100, 100, 0.0,    0.0, 1.0, 0.0,   0.0, 1.0,
            100, 100, -200.0,   0.0, 1.0, 0.0,   1.0, 0.0,
            -100, 100, -200.0,  0.0, 1.0, 0.0,   0.0, 0.0,

            -100, 100, 0.0,    0.0, 1.0, 0.0,   0.0, 1.0,
            100, 100, 0.0,      0.0, 1.0, 0.0,   1.0, 1.0,
            100, 100, -200.0,   0.0, 1.0, 0.0,   1.0, 0.0,

            // Шостий трикутник (нижня сторона)
            -100, -100, 0.0,    0.0, -1.0, 0.0,   0.0, 1.0,
            -100, -100, -200.0,  0.0, -1.0, 0.0,   0.0, 0.0,
            100, -100, -200.0,   0.0, -1.0, 0.0,   1.0, 0.0,

            -100, -100, 0.0,    0.0, -1.0, 0.0,   0.0, 1.0,
            100, -100, -200.0,   0.0, -1.0, 0.0,   1.0, 0.0,
            100, -100, 0.0,      0.0, -1.0, 0.0,   1.0, 1.0,
    };
}

void Cube::initVAOAndVBO() { // TODO: improve it
    vao.generate();
    vao.bind();

    vbo.generate();;
    vbo.bind();
    vbo.setData(vertices);

    vao.vertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), nullptr);
    vao.vertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), reinterpret_cast<void*>(3 * sizeof(float)));
    vao.vertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), reinterpret_cast<void*>(6 * sizeof(float)));

    vao.unbind();
    vbo.unbind();
}

void Cube::draw(ShaderProgram &shaderProgram, Texture &texture1, Texture &texture2) {
    render(shaderProgram, vao, texture1, texture2);
}
